name: Deploy Node.js Application to Azure Ubuntu Server

on:
  push:
    branches:
      - main  # Trigger on pushes to main branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.18.0'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci



      - name: Set up SSH
        env:
          SSH_PRIVATE_KEY: ${{ vars.SSH_PRIVATE_KEY }}
          SERVER_HOST: ${{ vars.SERVER_HOST }}
          SERVER_USER: ${{ vars.SERVER_USER }}
        run: |
          # Create SSH directory
          mkdir -p ~/.ssh
          
          # Write SSH key
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          
          # Set correct permissions
          chmod 600 ~/.ssh/id_rsa
          
          # Add server to known hosts
          ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts
          
          # Start SSH agent
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

      - name: Deploy to Server
        env:
          # Application Environment Variables
          DB_USER: ${{ vars.DB_USER }}
          DB_PASS: ${{ vars.DB_PASS }}
          DB_HOST: ${{ vars.DB_HOST }}
          DB_NAME: ${{ vars.DB_NAME }}
          PORT: ${{ vars.PORT }}
          JWT_SECRET: ${{ vars.JWT_SECRET }}
          
          # Server Details
          SERVER_HOST: ${{ vars.SERVER_HOST }}
          SERVER_USER: ${{ vars.SERVER_USER }}
          APP_DIR: 'nearest-class-finder-backend'
          
          SSH_PRIVATE_KEY: ${{ vars.SSH_PRIVATE_KEY }}
        run: |
          # Deploy script with comprehensive error handling
          ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY $SERVER_USER@$SERVER_HOST << 'EOF'
            # Exit on any error
            set -e
            
            # Navigate to application directory
            cd $APP_DIR
            
            # Ensure git repository is up to date
            git fetch origin
            git reset --hard origin/main
            
            # Install dependencies
            npm ci
            
            # Create or update .env file
            cat > .env << EOL
            DB_USER=$DB_USER
            DB_PASS=$DB_PASS
            DB_HOST=$DB_HOST
            DB_NAME=$DB_NAME
            PORT=$PORT
            JWT_SECRET=$JWT_SECRET
            EOL
            
            # Ensure PM2 is installed
            npm install -g pm2 || true
            
            # Stop existing process if running
            pm2 delete nearest_class_finder_backend || true
            
            # Start application with PM2
            pm2 start app.js --name nearest_class_finder_backend
            
            # Restart services
            sudo systemctl restart mysql || echo "MySQL restart failed"
            sudo systemctl restart nginx || echo "Nginx restart failed"
            
            # List running processes
            pm2 list
          EOF

      - name: Notify on Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: Deployment failed for ${{ github.repository }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}